// import express from "express";
// import mongoose from "mongoose";
// import dotenv from "dotenv";
// import jwt from "jsonwebtoken";
// import bcrypt from "bcryptjs";
// import cors from "cors";
// import multer from "multer";
// import { v2 as cloudinary } from "cloudinary";
// import { fileURLToPath } from 'url';
// import { dirname } from 'path';
// import fs from "fs";

// dotenv.config();
// const app = express();
// app.use(cors());
// app.use(express.json());

// // MongoDB Connection
// const connectDB = async () => {
//     mongoose.connection.on('connected', () => console.log("Database Connected"))
//     await mongoose.connect(`${process.env.MONGODB_URI}/prescripto`)
// }
// connectDB()

// // Cloudinary Setup
// cloudinary.config({
//     cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
//     api_key: process.env.CLOUDINARY_API_KEY,
//     api_secret: process.env.CLOUDINARY_API_SECRET
// });

// // Multer (Only allow image uploads)
// const imageFilter = (req, file, cb) => {
//     if (!file.mimetype.startsWith("image/")) {
//         cb(new Error("Only image files are allowed!"), false);
//     } else {
//         cb(null, true);
//     }
// };

// const storage = multer.diskStorage({
//     filename: (req, file, cb) => cb(null, Date.now() + "_" + file.originalname),
// });
// const upload = multer({ storage, fileFilter: imageFilter });

// // ======================= MODELS ======================= //
// const userSchema = new mongoose.Schema({
//     name: String,
//     email: { type: String, unique: true },
//     password: String,
//     image: String,
//     gender: String,
//     dob: String,
//     phone: String,
//     address: Object,
//     date: Number,
// });

// const adminSchema = new mongoose.Schema({
//     email: String,
//     password: String,
// });

// const doctorSchema = new mongoose.Schema({
//     name: { type: String, required: true },
//     email: { type: String, required: true, unique: true },
//     password: { type: String, required: true },
//     image: { type: String, required: true },
//     speciality: { type: String, required: true },
//     degree: { type: String, required: true },
//     experience: { type: String, required: true },
//     about: { type: String, required: true },
//     available: { type: Boolean, default: true },
//     fees: { type: Number, required: true },
//     slots_booked: { type: Object, default: {} },
//     address: { type: Object, required: true },
//     date: { type: Number, required: true },
// }, { minimize: false })

// const appointmentSchema = new mongoose.Schema({
//     userId: String,
//     docId: String,
//     slotDate: String,
//     slotTime: String,
//     userData: Object,
//     docData: Object,
//     amount: Number,
//     date: Number,
//     cancelled: { type: Boolean, default: false },
//     payment: { type: Boolean, default: false },
//     isCompleted: { type: Boolean, default: false },
//     roomId: { type: String, default: "" }
// });

// const User = mongoose.models.User || mongoose.model("User", userSchema);
// const Admin = mongoose.models.Admin || mongoose.model("Admin", adminSchema);
// const Doctor = mongoose.models.Doctor || mongoose.model("Doctor", doctorSchema);
// const Appointment = mongoose.models.Appointment || mongoose.model("Appointment", appointmentSchema);


// // ======================= AUTH MIDDLEWARES ======================= //
// const authAdmin = (req, res, next) => {
//     try {
//         const token = req.headers.authorization?.split(" ")[1];
//         const decoded = jwt.verify(token, process.env.JWT_SECRET);
//         if (decoded.role !== 'admin') throw new Error("Unauthorized");
//         next();
//     } catch {
//         res.status(401).json({ success: false, message: "Unauthorized Admin" });
//     }
// };

// const authUser = (req, res, next) => {
//     try {
//         const token = req.headers.authorization?.split(" ")[1];
//         const decoded = jwt.verify(token, process.env.JWT_SECRET);
//         if (decoded.role !== 'user') throw new Error("Unauthorized");
//         req.userId = decoded.id;
//         next();
//     } catch {
//         res.status(401).json({ success: false, message: "Unauthorized User" });
//     }
// };

// const authDoctor = (req, res, next) => {
//     try {
//         const token = req.headers.authorization?.split(" ")[1];
//         const decoded = jwt.verify(token, process.env.JWT_SECRET);
//         if (decoded.role !== 'doctor') throw new Error("Unauthorized");
//         req.docId = decoded.id;
//         next();
//     } catch {
//         res.status(401).json({ success: false, message: "Unauthorized Doctor" });
//     }
// };

// // ======================= ROUTES ======================= //
// // --- Admin Login ---
// app.post("/api/admin/login", (req, res) => {
//     const { email, password } = req.body;
//     if (email === process.env.ADMIN_EMAIL && password === process.env.ADMIN_PASSWORD) {
//         const token = jwt.sign({ email, role: 'admin' }, process.env.JWT_SECRET, { expiresIn: "1d" });
//         res.json({ success: true, token });
//     } else {
//         res.json({ success: false, message: "Invalid Credentials" });
//     }
// });

// // --- User Register/Login ---
// app.post("/api/user/register", async (req, res) => {
//     try {
//         const hashed = await bcrypt.hash(req.body.password, 10);
//         const newUser = new User({ ...req.body, password: hashed });
//         await newUser.save();
//         res.json({ success: true });
//     } catch (err) {
//         res.status(500).json({ success: false, message: err.message });
//     }
// });

// app.post("/api/user/login", async (req, res) => {
//     const { email, password } = req.body;
//     const user = await User.findOne({ email });
//     if (user && await bcrypt.compare(password, user.password)) {
//         const token = jwt.sign({ id: user._id, role: 'user' }, process.env.JWT_SECRET, { expiresIn: '1d' });
//         res.json({ success: true, token });
//     } else {
//         res.json({ success: false, message: "Invalid Credentials" });
//     }
// });

// // --- Upload Profile Image (User/Doctor/Admin can use this) ---
// app.post("/api/upload", upload.single("image"), async (req, res) => {
//     try {
//         const result = await cloudinary.uploader.upload(req.file.path);
//         fs.unlinkSync(req.file.path); // remove from local after uploading
//         res.json({ success: true, url: result.secure_url });
//     } catch (err) {
//         res.status(500).json({ success: false, message: err.message });
//     }
// });

// // --- Protected User Route Example ---
// app.get("/api/user/appointments", authUser, async (req, res) => {
//     const appointments = await Appointment.find({ userId: req.userId });
//     res.json({ success: true, data: appointments });
// });

// // --- Protected Admin Route Example ---
// app.get("/api/admin/all-appointments", authAdmin, async (req, res) => {
//     const appointments = await Appointment.find();
//     res.json({ success: true, data: appointments });
// });

// // ======================= SERVER ======================= //
// const PORT = process.env.PORT || 5000;
// app.listen(PORT, () => console.log(` Server running on http://localhost:${PORT}`));

// ===========================GATEWAY INITIALIZATION =========================== //
// const stripeInstance = new stripe(process.env.STRIPE_SECRET_KEY)
// const razorpayInstance = new razorpay({
//     key_id: process.env.RAZORPAY_KEY_ID,
//     key_secret: process.env.RAZORPAY_KEY_SECRET,
// })

// ========================= BYCRPYT HASHING ========================= //
// const salt = await bcrypt.genSalt(10); // the more no. round the more time it will take
// const hashedPassword = await bcrypt.hash(password, salt)
// const userData = {
//             name,
//             email,
//             password: hashedPassword,
//         }

//         const newUser = new userModel(userData)
//         const user = await newUser.save()
// const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET)


//  const isMatch = await bcrypt.compare(password, user.password)
//         if (isMatch) {
//             const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET)
//             res.json({ success: true, token })
//         }



// // ======================== CONTROLLER ======================== //
// // ✅ Register User
// new userModel(data).save();

// // ✅ Login User
// userModel.findOne({ email });

// // ✅ Get Profile
// userModel.findById(userId).select("-password");

// // ✅ Update Profile
// userModel.findByIdAndUpdate(userId, updateData, { new: true });

// // ✅ Book Appointment
// doctorModel.findById(doctorId);
// userModel.findById(userId);
// new appointmentModel(appointmentData).save();
// doctorModel.findByIdAndUpdate(doctorId, { $push: { slots_booked: slotInfo } });

// // ✅ Cancel Appointment
// appointmentModel.findById(appointmentId);
// appointmentModel.findByIdAndUpdate(appointmentId, { isCancelled: true });
// doctorModel.findByIdAndUpdate(doctorId, { $pull: { slots_booked: slotInfo } });

// // ✅ List Appointments
// appointmentModel.find({ userId });

// // ✅ Razorpay Payment (Create Order)
// appointmentModel.findById(appointmentId);
// razorpayInstance.orders.create({...})
// razorpayInstance.orders.fetch(razorpay_order_id)

// // ✅ Verify Razorpay Payment
// appointmentModel.findByIdAndUpdate(orderInfo.receipt, { payment: true });

// // ✅ Stripe Payment (Create Session)
// appointmentModel.findById(appointmentId);
// stripeInstance.checkout.sessions.create({...})

// // ✅ Verify Stripe Payment
// appointmentModel.findByIdAndUpdate(appointmentId, { payment: true });

// // ✅ Join Meeting
// appointmentModel.findById(appointmentId);
// appointment.save(); // after adding roomId